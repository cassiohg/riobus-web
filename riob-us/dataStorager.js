var http = require('http'); // importing http module. it's a node's default module.
var fs = require('fs');	// importing filesystem module. using fs to read riobus-config.json.
var mongoose = require('mongoose'); // Used to access MongoDB with Models.
var Bus = require(__dirname + "/model/bus.js"); // Bus model for Mongoose.

// Access riobus-config.json
var config = JSON.parse(fs.readFileSync(__dirname + "/riobus-config.json")).dataStorager;
var serverConfig = JSON.parse(fs.readFileSync(__dirname + "/riobus-config.json")).server;

// URI to connect with MongoDB
var uri = config.mongoDB + config.mongoCollection;
// Connects to MongoDB
mongoose.connect(uri);

// Options to do the GET Request
var options = {
	host: config.host,
	path: config.path,
	port: serverConfig.port,
	method: "GET"
};

// Global variable to store json
var data = null;
// Interval between requests for riob.us/all
var intervalTime = config.intervalTime;

// Callback function to GET Request to riob.us/all
function callback(response) {
  var str = '';

  // another chunk of data has been recieved, so append it to `str`
  response.on('data', function (chunk) {
    str += chunk.toString('utf-8');
  });

  // the whole response has been recieved, so we just parse it to JSON
  response.on('end', function () {
    console.log("GET request for riob.us/all done.");
    data = JSON.parse(str);
  });
}

// Function that will make the request and save in MongoDB in time intervals.
setInterval(function() {
	// Make GET Request
	http.request(options, callback).end();
	
	// Checks if data already has been generated by JSON.parse.
	if(data != null) {
		// Create Bus instance of Mongoose Model and set it's variable values.
		var busEntry = new Bus();
		busEntry.last_update = data.LASTUPDATE
		busEntry.data = data.DATA
		// Save bus entry into MongoDB.
		busEntry.save(function(err){
				if(err) {
					console.log("<>Error saving bus entry in MongoDB!<>");
				}
				console.log("Succesfully saved bus entry into MongoDB.");
			});
	}
}, intervalTime);